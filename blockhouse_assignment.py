# -*- coding: utf-8 -*-
"""Blockhouse Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KLCZcl5JpaDzOuH4OS1otaG5_E7dngqg

#Quantitative Research Work Trial Task (US Treasury Bonds)- Models and Algorithms

Robynne Chevrette

For all models, data can be downloaded in the form of a csv (or Excel file and then converted to csv) from FRED or FINRA TRACE and imported to apply this code to real data (maturities, yields, etc.).

## Cubic Spline
"""

import numpy as np
from scipy.interpolate import CubicSpline

def fit_yield_curve(maturities, yields):
    cs = CubicSpline(maturities, yields)
    return cs

# Example usage:
maturities = np.array([1, 2, 10])  # Real maturities can be found on FRED
yields = np.array([0.01, 0.015, 0.035])  # Real corresponding yields can be found on FRED
fitted_curve = fit_yield_curve(maturities, yields)

# Interpolate for a specific maturity (ex. 5):
yield_5 = fitted_curve(5)
print(yield_5)

# View the entire curve:
import matplotlib.pyplot as plt
new_maturities = np.linspace(1, 10, 100)
interpolated_yields = fitted_curve(new_maturities)
plt.plot(new_maturities, interpolated_yields)
plt.xlabel("Maturity")
plt.ylabel("Yield")
plt.show()

"""## Nelson-Siegel Model"""

!pip install nelson_siegel_svensson
from nelson_siegel_svensson import NelsonSiegelSvenssonCurve

# Example usage:
y = NelsonSiegelSvenssonCurve(0.025, 0.03, 0.04, 0.05, 2, 4)
t = np.linspace(0, 20, 100)
plt.plot(t, y(t))
plt.xlabel("Maturity")
plt.ylabel("Yield")
plt.show()

# Note: inputs to NelsonSiegelSvenssonCurve can be calculated using formula provided
# by Babbel et. al (article cited in framework).

"""## Relative Pricing Algorithm"""

def calculate_yield_spread(infrequent_yield, benchmark_yield):
    return infrequent_yield - benchmark_yield

# Note: benchmark_yield can be calculated using the formula for synthetic securities
# provided by Babbel et. al (article cited in framework).

# Example usage:
calculate_yield_spread(0.03, 0.025)

"""## Liquidity Adjusted TCA"""

def liquidity_adjusted_tca(bid_ask_spread, trade_volume, transaction_cost):
    liquidity_penalty = bid_ask_spread / trade_volume
    adjusted_cost = transaction_cost + liquidity_penalty
    return adjusted_cost

# Note: Bid-ask spread serves as a proxy for liquidity cost (wider spread normally
# indicates lower liquidity). Larger trades in less liquid markets can increase transaction
# cost. Liquidity penalty calculates impact of spread on trade volume.

# Note: Transaction cost can be calculated based on formulas such as those provided
# by Anderson (article cited in framework).

# Example usage:
liquidity_adjusted_tca(0.01, 1000, 0.001)